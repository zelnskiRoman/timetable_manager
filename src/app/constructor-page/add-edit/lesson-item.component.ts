import {Component, Input, ElementRef, HostListener, Output, EventEmitter} from '@angular/core';import {ITutor, ILesson, EditStyle, IListItem} from './utils/interfaces';import {HttpClient, HttpErrorResponse} from '@angular/common/http';@Component({  selector: 'app-lesson-component',  templateUrl: './templates/university-item.component.html',  styleUrls: ['./styles/university-item.component.sass']})export class LessonItemComponent implements IListItem {  @Input() lessonData: ILesson;  @Input() editPanelStyle: EditStyle;  @Input() deleteUrl: string;  @Input() updateUrl: string;  @Output() addClick = new EventEmitter<ILesson>();  @Output() itemDeleted = new EventEmitter<ILesson>();  isSelected: boolean;  showAddPanel: boolean;  showLoading = false;  editingStatus = false;  editedData: string;  @HostListener('document:click', ['$event'])  outsideClick(event) {    this.isSelected = !!this.eRef.nativeElement.contains(event.target);    if (!this.isSelected) {      this.showAddPanel = false;    }  }  constructor(    private httpClient: HttpClient,    private eRef: ElementRef) {    this.showAddPanel = false;  }  getTitle(): string {    return this.lessonData.title;  }  getSubItems(): ITutor[] {    return this.lessonData.tutors;  }  deleteItem(): void {    this.showLoading = true;    this.httpClient.post(this.deleteUrl, JSON.stringify({id: this.lessonData.id})).toPromise()      .then((res: {id: string}) => {        this.itemDeleted.emit(this.lessonData);        this.showLoading = false;      })      .catch((err) => {        console.log(err);      });  }  onEditClick(): void {    this.editingStatus = true;  }  cancelEditing(): void {    this.editingStatus = false;  }  updateItem(): void {    if (this.lessonData.title !== this.editedData) {      this.showLoading = true;      this.httpClient.post(this.updateUrl, JSON.stringify({id: this.lessonData.id, title: this.editedData})).toPromise()        .then((res: ILesson) => {          this.lessonData.title = res.title;          this.editingStatus = false;          this.showLoading = false;        })        .catch((err: HttpErrorResponse) => {          console.log(err);        });    }  }  onAddClick(): void {    this.addClick.emit(this.lessonData);  }  inputHandler(input: HTMLInputElement): void {    this.editedData = input.value;  }  addTutorToLesson(name: string): void {    if (name.length > 5) {      this.lessonData.tutors.push({name});      this.showAddPanel = false;    }  }}