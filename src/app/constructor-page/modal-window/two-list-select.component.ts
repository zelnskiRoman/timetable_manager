import {Component, EventEmitter, Input, Output, TemplateRef, OnInit} from '@angular/core';import {HttpClient, HttpParams} from '@angular/common/http';interface ISelectList {  source: string;  addSource?: string;  inputPlaceholder: string;  emptyMessage: string;  getParams?: {};  postParams?: object;  addButton: boolean;  addMasterTemplate?: TemplateRef<any>;  multiSelection?: boolean;  masterItemTemplate?: TemplateRef<any>;  detailsItemTemplate?: TemplateRef<any>;  allowLoadDetailsIds?: string[];}interface ITwoSelectResult {  target?: string;  master: any;  details: any;}interface ITwoListSelectOptions {  master: ISelectList;  details: ISelectList;  target?: string;}@Component({  selector: 'app-two-list-select',  templateUrl: './templates/two-list-select.component.html',  styleUrls: ['./styles/two-list-select.component.sass', './styles/modals-styles.component.sass']})export class TwoListSelectComponent implements OnInit {  @Input() options: ITwoListSelectOptions;  @Output() closeWindow = new EventEmitter<void | ITwoSelectResult>();  masterItems: any;  detailsItems: any;  selectedMasterItems: any = [];  selectedDetailsItems: any = [];  showDetailsLoading = false;  showAddModal = false;  addNewTemplate: TemplateRef<any>;  addTarget: string;  onMasterClickHandler;  onDetailsClickHandler;  masterInputClickHandler;  detailsInputClickHandler;  masterAddClickHandler;  constructor(    private httpClient: HttpClient  ) {    this.onMasterClickHandler = this.onMasterItemClick.bind(this);    this.onDetailsClickHandler = this.onDetailsItemClick.bind(this);    this.masterInputClickHandler = this.inputClick.bind(this);    this.detailsInputClickHandler = this.detailsInputClick.bind(this);    this.masterAddClickHandler = this.masterAddClick.bind(this);  }  close(): void {    this.closeWindow.emit();  }  submitSelection(): void {    if (this.options.target) {      this.closeWindow.emit({        target: this.options.target,        master: this.selectedMasterItems,        details: this.selectedDetailsItems      });    } else {      this.closeWindow.emit({        master: this.selectedMasterItems,        details: this.selectedDetailsItems      });    }  }  onDetailsItemClick(item: any): void {    this.detailsItems.forEach((el: any) => {      el.selected = false;    });    this.selectedDetailsItems = [];    this.detailsItems[this.detailsItems.indexOf(item)].selected = true;    this.selectedDetailsItems.push(item);  }  multiSelectItem(item: any, source: any, selectedSource: any): void {    if (!item.selected) {      selectedSource.splice(selectedSource.indexOf(item), 1);    } else {      selectedSource.push(item);    }    source[source.indexOf(item)].selected = !source[source.indexOf(item)].selected;  }  sendGet(url: string, parameters: any, source?: any): Promise<any> {    const params = new HttpParams({      fromObject: parameters    });    return this.httpClient.get(url, { params }).toPromise()      .then((res) => {        return  res;      })      .catch((err) => {        console.log(err);      });  }  sendPost(url: string, body: any, source?: any): Promise<any> {    return this.httpClient.post(url, JSON.stringify(body)).toPromise()      .then((res) => {        return res;      })      .catch((err) => {        console.log(err);      });  }  getDetailsList(masterItem: any): void {    let canLoad;    if (this.options.master.allowLoadDetailsIds) {      canLoad = this.options.master.allowLoadDetailsIds.indexOf(masterItem.id) !== -1;    } else {      canLoad = true;    }    if (canLoad) {      this.detailsItems = null;      this.showDetailsLoading = true;      if (this.options.details.getParams) {        this.sendGet(this.options.details.source, {lesson: masterItem.id})          .then((res) => {            this.detailsItems = res;            this.showDetailsLoading = false;          });      } else {        this.sendPost(this.options.details.source, masterItem)          .then((res) => {            this.detailsItems = res;            this.showDetailsLoading = false;          });      }    } else {      this.detailsItems = [];    }  }  onMasterItemClick(item: any): void {    if (!this.showDetailsLoading) {      // if (this.detailsItems) {      //   this.detailsItems = null;      // }      this.selectedDetailsItems = [];      if (this.options.master.multiSelection) {        this.multiSelectItem(item, this.masterItems, this.selectedMasterItems);      } else {        this.masterItems.forEach((el: any) => {          el.selected = false;        });        this.selectedMasterItems = [];        this.masterItems[this.masterItems.indexOf(item)].selected = true;        this.selectedMasterItems.push(item);      }      if (this.selectedMasterItems.length === 1) {        this.getDetailsList(this.selectedMasterItems[0]);      }    }  }  inputClick(): void {    this.masterItems.forEach((el) => {      el.selected = false;    });    this.detailsItems.forEach((el) => {      el.selected = false;    });    this.detailsItems = null;    this.selectedDetailsItems = [];    this.selectedMasterItems = [];  }  detailsInputClick(): void {    this.detailsItems.forEach((el) => {      el.selected = false;    });    this.selectedDetailsItems = [];  }  masterAddClick(input: HTMLInputElement): void {    this.addNewTemplate = this.options.master.addMasterTemplate;    this.addTarget = 'master';    this.showAddModal = true;  }  hideModal(result: any): void {    if (result.target === 'master') {      this.addMasterHandler(result.body);    }    this.showAddModal = false;    this.addNewTemplate = null;  }  addMasterHandler(body: any): void {    const masterArray = this.masterItems.concat();    this.masterItems = null;    this.detailsItems = null;    this.httpClient.post(this.options.master.addSource, JSON.stringify(body)).toPromise()      .then((res) => {        this.selectedMasterItems = [];        this.selectedDetailsItems = [];        this.masterItems = masterArray;        this.masterItems.push(res);      })      .catch((err) => {        console.log(err);      });  }  ngOnInit(): void {    if (this.options.master.getParams) {      this.sendGet(this.options.master.source, this.options.master.getParams, this.masterItems)        .then((res) => {          this.masterItems = res;        });    } else {      this.sendPost(this.options.master.source, this.options.master.postParams, this.masterItems);    }  }}